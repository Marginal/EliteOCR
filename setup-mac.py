#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
This is a setup.py script generated by py2applet

Usage:
    python -OO setup-mac.py py2app
"""

from setuptools import setup
import os
from os import listdir, mkdir, rmdir, symlink, unlink
from os.path import isdir, islink, isfile, join
import platform
import re
import shutil
import sys
from tempfile import gettempdir


if sys.platform != 'darwin':
    raise AssertionError("This script is for building on MacOS")
elif __debug__:
    raise AssertionError("Run with `python -OO setup-mac.py py2app`")

# Patch py2app extension loader to work with gevent
import py2app.util
py2app.util.LOADER = """
def __load():
    imp = __import__("imp")
    os = __import__("os")
    sys = __import__("sys")
    ext = %r
    for path in sys.path:
        if not path.endswith('lib-dynload'):
            continue
        ext_path = os.path.join(path, ext)
        if os.path.exists(ext_path):
            mod = imp.load_dynamic(__name__, ext_path)
            break
    else:
        raise ImportError(repr(ext) + " not found")
__load()
del __load
"""

# Patch py2app recipe enumerator to skip the sip recipe since it's too enthusiastic - we'll list additional Qt modules explicitly
from py2app import recipes
import py2app.build_app
def iterRecipes(module=recipes):
    for name in dir(module):
        if name.startswith('_') or name=='sip':
            continue
        check = getattr(getattr(module, name), 'check', None)
        if check is not None:
            yield (name, check)
py2app.build_app.iterRecipes = iterRecipes

# Hack to handle Qt image plugins (py2app 0.9 sip recipe puts them under Resources, which makes the app unsignable)
from py2app.build_app import PLUGIN_SUFFIXES
PLUGIN_SUFFIXES['.dylib'] = 'qt_plugins/imageformats'
qt_conf = join(gettempdir(), 'qt.conf')
f = open(qt_conf, 'wt')
f.write('[Paths]\nPlugins = Library/qt_plugins\n')
f.close()


APPNAME = 'EliteOCR'

# Build directory
DIST='dist.macosx'
if DIST and len(DIST)>1 and isdir(DIST):
    shutil.rmtree(DIST)

# "Developer ID Application" name for signing
MACDEVELOPERID = None

SPARKLE = '/Library/Frameworks/Sparkle.framework'

VERSION = re.search(r'^appversion\s*=\s*"(.+)"', file('EliteOCR.py').read(), re.MULTILINE).group(1)
APP = ['EliteOCR.py']
DATA_FILES = []
OPTIONS = {'dist_dir': DIST,
           'semi_standalone': True,
           'site_packages': False,
           'iconfile': '%s.icns' % APPNAME,
           'optimize': 2,
           'resources': [qt_conf,	# http://doc.qt.io/qt-4.8/qt-conf.html
                         'help',
                         'plugins',	# for TD_Export
                         'translations',
                         'base_training_data.pck', 'letters.xml', 'numbers.xml', 'station.xml', 'commodities.json'],
           'includes': ['PyQt4.QtNetwork'],
           'include_plugins': ['/Developer/Applications/Qt/plugins/imageformats/libqgif.dylib', '/Developer/Applications/Qt/plugins/imageformats/libqico.dylib'],
           'excludes': ['PIL', 'setuptools', 'simplejson', 'matplotlib', 'wx'],	# random modules that tend to get picked up
           'plist': {
               'CFBundleName': APPNAME,
               'CFBundleIdentifier': 'com.seeebek.eliteOCR',	# matches what QSettings stores
               'CFBundleShortVersionString': VERSION,
               'CFBundleVersion': VERSION,
               'LSArchitecturePriority': ['x86_64'],	# python exe is fat, but our Frameworks and dylds currently aren't
               'LSMinimumSystemVersion': '10.9',
               'NSHumanReadableCopyright': u'Â© 2014 Sebastian Kaminski',
           },
           'graph': True,	# output dependency graph in dist
       }

if isdir(SPARKLE):
    OPTIONS['frameworks'] = OPTIONS.get('frameworks', []) + ['Sparkle.framework']
    OPTIONS['plist'].update({
        'SUEnableAutomaticChecks': True,
        'SUAllowsAutomaticUpdates': False,
        'SUFeedURL': 'http://eliteocr.sourceforge.net/appcast.xml',
        'SUScheduledCheckInterval': 47*60*60,
        })
else:
    print "Building without Sparkle update support"

setup(
    app=APP,
    data_files=DATA_FILES,
    options={'py2app': OPTIONS},
    setup_requires=['py2app'],
)

# Fix up Qt frameworks for codesigning
# https://blog.qt.io/blog/2014/10/29/an-update-on-os-x-code-signing/
root = join(DIST, '%s.app/Contents/Frameworks' % APPNAME)
for thing in listdir(root):
    if not thing.endswith('.framework'):
        continue

    # Make Resources and executable point to Current version
    # https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPFrameworks/Concepts/FrameworkAnatomy.html
    if not(isdir(join(root, thing, 'Versions', 'Current', 'Resources'))):
        mkdir(join(root, thing, 'Versions', 'Current', 'Resources'))
    if islink(join(root, thing, 'Resources')):
        unlink(join(root, thing, 'Resources'))
    symlink(join('Versions', 'Current', 'Resources'), join(root, thing, 'Resources'))

    fmwk = thing.split('.')[0]
    if islink(join(root, thing, fmwk)):
        unlink(join(root, thing, fmwk))
    symlink(join('Versions', 'Current', fmwk), join(root, thing, fmwk))

    # Move Info.plist and QtThing.prl to Resources
    if isfile(join(root, thing, 'Contents', 'Info.plist')):
        shutil.move(join(root, thing, 'Contents', 'Info.plist'), join(root, thing, 'Resources'))
        rmdir(join(root, thing, 'Contents'))	# should be empty
    if isfile(join(root, thing, fmwk+'.prl')):
        shutil.move(join(root, thing, fmwk+'.prl'), join(root, thing, 'Resources'))

    # Remove "4.0" version links
    for link in listdir(join(root, thing, 'Versions')):
        if '.' in link:
            unlink(join(root, thing, 'Versions', link))

# sign
if MACDEVELOPERID:
    os.system('codesign --deep -v -s "Developer ID Application: %s" %s/%s.app' % (MACDEVELOPERID, DIST, APPNAME))

# Make zip for distribution, preserving signature
PKG = '%s_mac_%s.zip' % (APPNAME, VERSION)
os.system('cd %s; ditto -ck --keepParent --sequesterRsrc %s.app ../%s; cd ..' % (DIST, APPNAME, PKG))

# Make appcast entry
with open('appcast_mac_%s.xml' % VERSION, 'w') as appcast:
    appcast.write('''
\t\t<item>
\t\t\t<title>Release {0}</title>
\t\t\t<description>
\t\t\t\t<![CDATA[
<h2>Release {0}</h2>
<ul>

</ul>
\t\t\t\t]]>
\t\t\t</description>
\t\t\t<enclosure
\t\t\t\turl="https://github.com/Marginal/EliteOCR/releases/download/{0}/{1}/download"
\t\t\t\tsparkle:os="osx"
\t\t\t\tsparkle:version="{0}"
\t\t\t\tlength="{2}"
\t\t\t\ttype="application/octet-stream"
\t\t\t/>
\t\t</item>
'''.format(VERSION,
           PKG,
           os.stat(PKG).st_size))
