# -*- coding: utf-8 -*-
"""
This is a setup.py script generated by py2applet

Usage:
    python setup.py py2app
"""

from setuptools import setup
from os import listdir, mkdir, rmdir, symlink, unlink
from os.path import isdir, islink, isfile, join
import pkg_resources
import platform
import re
import shutil
from tempfile import gettempdir

# Patch py2app extension loader to work with gevent
import py2app.util
py2app.util.LOADER = """
def __load():
    imp = __import__("imp")
    os = __import__("os")
    sys = __import__("sys")
    ext = %r
    for path in sys.path:
        if not path.endswith('lib-dynload'):
            continue
        ext_path = os.path.join(path, ext)
        if os.path.exists(ext_path):
            mod = imp.load_dynamic(__name__, ext_path)
            break
    else:
        raise ImportError(repr(ext) + " not found")
__load()
del __load
"""

# Patch py2app recipe enumerator to skip the sip recipe since it's too enthusiastic - we'll list additional Qt modules explicitly
from py2app import recipes
import py2app.build_app
def iterRecipes(module=recipes):
    for name in dir(module):
        if name.startswith('_') or name=='sip':
            continue
        check = getattr(getattr(module, name), 'check', None)
        if check is not None:
            yield (name, check)
py2app.build_app.iterRecipes = iterRecipes

# Hack to handle Qt image plugins (py2app 0.9 sip recipe puts them under Resources, which makes the app unsignable)
from py2app.build_app import PLUGIN_SUFFIXES
PLUGIN_SUFFIXES['.dylib'] = 'qt_plugins/imageformats'
qt_conf = join(gettempdir(), 'qt.conf')
f = open(qt_conf, 'wt')
f.write('[Paths]\nPlugins = Library/qt_plugins\n')
f.close()


VERSION = re.search(r'^appversion\s*=\s*"(.+)"', file('EliteOCR.py').read(), re.MULTILINE).group(1)
APP = ['EliteOCR.py']
DATA_FILES = []
OPTIONS = {'semi_standalone': True,
           'site_packages': False,
           'iconfile': 'EliteOCR.icns',
           'optimize': 2,
           'resources': [qt_conf,	# http://doc.qt.io/qt-4.8/qt-conf.html
                         'plugins',	# for TD_Export
                         'translations', 'base_training_data.pck', 'letters.xml', 'numbers.xml', 'station.xml', 'help', 'commodities.json'],
           'includes': ['PyQt4.QtNetwork'],
           'include_plugins': ['/Developer/Applications/Qt/plugins/imageformats/libqgif.dylib', '/Developer/Applications/Qt/plugins/imageformats/libqico.dylib'],
           'excludes': ['PIL', 'setuptools', 'matplotlib', 'wx',	# random modules that tend to get picked up
                        'threadworker', 'update', 'updateUI'],  	# windows-specific source files
           'plist': {
               'CFBundleName': 'EliteOCR',
               'CFBundleIdentifier': 'com.seeebek.eliteOCR',	# matches what QSettings stores
               'CFBundleShortVersionString': VERSION,
               'CFBundleVersion':  VERSION,
               'LSArchitecturePriority': ['x86_64'],	# python exe is fat, but our Frameworks and dylds currently aren't
               'LSMinimumSystemVersion': '.'.join(platform.mac_ver()[0].split('.')[:2]),	# minimum version = build version
               'NSHumanReadableCopyright': u'Â© 2014 Sebastian Kaminski',
           },
           'graph': True,	# output dependency graph in dist
       }

if isdir('/Library/Frameworks/Sparkle.framework'):
    OPTIONS['frameworks'] = OPTIONS.get('frameworks', []) + ['Sparkle.framework']
    OPTIONS['plist'].update({
        'SUEnableAutomaticChecks': False,	# we check explitly on startup
        'SUAllowsAutomaticUpdates': False,
        'SUFeedURL': 'http://eliteocr.sourceforge.net/appcast.xml',
        'SUScheduledCheckInterval': 24*60*60,
        })
else:
    print "Building without Sparkle update support"

setup(
    app=APP,
    data_files=DATA_FILES,
    options={'py2app': OPTIONS},
    setup_requires=['py2app'],
)

# Fix up Qt frameworks for codesigning
# https://blog.qt.io/blog/2014/10/29/an-update-on-os-x-code-signing/
root = 'dist/EliteOCR.app/Contents/Frameworks'
for thing in listdir(root):
    if not thing.endswith('.framework'):
        continue

    # Make Resources and executable point to Current version
    # https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPFrameworks/Concepts/FrameworkAnatomy.html
    if not(isdir(join(root, thing, 'Versions', 'Current', 'Resources'))):
        mkdir(join(root, thing, 'Versions', 'Current', 'Resources'))
    if islink(join(root, thing, 'Resources')):
        unlink(join(root, thing, 'Resources'))
    symlink(join('Versions', 'Current', 'Resources'), join(root, thing, 'Resources'))

    fmwk = thing.split('.')[0]
    if islink(join(root, thing, fmwk)):
        unlink(join(root, thing, fmwk))
    symlink(join('Versions', 'Current', fmwk), join(root, thing, fmwk))

    # Move Info.plist and QtThing.prl to Resources
    if isfile(join(root, thing, 'Contents', 'Info.plist')):
        shutil.move(join(root, thing, 'Contents', 'Info.plist'), join(root, thing, 'Resources'))
        rmdir(join(root, thing, 'Contents'))	# should be empty
    if isfile(join(root, thing, fmwk+'.prl')):
        shutil.move(join(root, thing, fmwk+'.prl'), join(root, thing, 'Resources'))

    # Remove "4.0" version links
    for link in listdir(join(root, thing, 'Versions')):
        if '.' in link:
            unlink(join(root, thing, 'Versions', link))

